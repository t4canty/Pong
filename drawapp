import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.applet.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;


public class Lab2 extends Applet implements ActionListener, KeyListener, MouseListener
{

	//Initializing variables
	
	int x;
	int y;
	int posx;
	int posy;
	String s = "";
	int table_width;
	int table_height;
    
//init function
	public void init(){
		table_width = getSize().width;
		table_height = getSize().height;
		
		addKeyListener( this );
		addMouseListener( this );
	}
	
	//painting function
	public void paint(Graphics g)
    {
    	this.setSize(800,600);
    	x = table_width / 4 + 50;
    	y = table_height / 4 + 50;
    	
        // DRAW APCS
    	//opening custom font
    	try {
			String dir = System.getProperty("user.dir");
    		URL fontUrl = new URL("file:///" + dir + "/FFFFORWA.TTF");
			Font font = Font.createFont(Font.TRUETYPE_FONT, fontUrl.openStream());
	        font = font.deriveFont(Font.PLAIN,40);
	        GraphicsEnvironment ge =
	            GraphicsEnvironment.getLocalGraphicsEnvironment();
	        ge.registerFont(font);
	        g.setFont(font);
	        g.drawString("APCS", 500 , 600 );
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (FontFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	g.setColor(Color.GREEN);
    	
    	g.drawString(s, 80, 500);
    	g.setColor(Color.BLACK);
    	//draw plane 1
    	posx = table_width/4;
    	posy = table_height/4;
    	g.drawLine(posx, posy, posx, posy + 200);
    	g.drawLine(posx, posy, posx + 200, posy);
    	g.drawLine(posx + 200, posy, posx + 200, posy + 200);
    	g.drawLine(posx, posy+ 200, posx + 200 , posy + 200);
    	
    	//DRAW PLANE 2
    	posx = table_width/4 + 100;
    	posy = table_height/4 + 100;
    	g.drawLine(posx, posy, posx, posy + 200);
    	g.drawLine(posx, posy, posx + 200, posy);
    	g.drawLine(posx + 200, posy, posx + 200, posy + 200);
    	g.drawLine(posx, posy+ 200, posx + 200 , posy + 200);
    	
    	//CONNECT PLANES
    	posx = table_width/4 + 100;
    	posy = table_height/4 + 100;
    	g.drawLine(posx - 100, posy - 100, posx, posy);
    	g.drawLine(posx + 100, posy - 100, posx + 200, posy);
    	g.drawLine(posx - 100, posy + 100, posx , posy + 200);
    	g.drawLine(posx + 100, posy + 100, posx + 200, posy + 200);
        // DRAW SPHERE
    	posx = table_width/4 +50;
    	posy = table_height/4 +50;
    	g.drawOval(posx, posy, 200, 200);
    	
    	//increment x ovals
    	g.drawOval(posx + 10/2, posy, 200 - 10 , 200);
    	g.drawOval(posx + 20/2, posy, 200 - 20 , 200);
    	g.drawOval(posx + 30/2, posy, 200 - 30 , 200);
    	g.drawOval(posx + 40/2, posy, 200 - 40 , 200);
    	g.drawOval(posx + 50/2, posy, 200 - 50 , 200);
    	g.drawOval(posx + 60/2, posy, 200 - 60 , 200);
    	g.drawOval(posx + 70/2, posy, 200 - 70 , 200);
    	g.drawOval(posx + 80/2, posy, 200 - 80 , 200);
    	g.drawOval(posx + 90/2, posy, 200 - 90 , 200);
    	g.drawOval(posx + 100/2, posy, 200 - 100 , 200);
    	g.drawOval(posx + 110/2, posy, 200 - 110 , 200);
    	g.drawOval(posx + 120/2, posy, 200 - 120 , 200);
    	g.drawOval(posx + 130/2, posy, 200 - 130 , 200);
    	g.drawOval(posx + 140/2, posy, 200 - 140 , 200);
    	g.drawOval(posx + 150/2, posy, 200 - 150 , 200);
    	g.drawOval(posx + 160/2, posy, 200 - 160 , 200);
    	g.drawOval(posx + 170/2, posy, 200 - 170 , 200);
    	g.drawOval(posx + 180/2, posy, 200 - 180 , 200);
    	g.drawOval(posx + 190/2, posy, 200 - 190 , 200);
    	g.drawOval(posx + 100, posy, 0 , 200);
    	
    	// increment y ovals
    	g.drawOval(posx, posy + 10/2, 200, 200 - 10);
    	g.drawOval(posx, posy + 20/2, 200, 200 - 20 );
    	g.drawOval(posx, posy + 30/2, 200, 200 - 30  );
    	g.drawOval(posx, posy + 40/2, 200, 200 - 40  );
    	g.drawOval(posx, posy + 50/2, 200, 200 - 50  );
    	g.drawOval(posx, posy + 60/2, 200, 200 - 60  );
    	g.drawOval(posx, posy + 70/2, 200, 200 - 70 );
    	g.drawOval(posx, posy + 80/2, 200, 200 - 80  );
    	g.drawOval(posx, posy + 90/2, 200, 200 - 90  );
    	g.drawOval(posx, posy + 100/2, 200, 200 - 100  );
    	g.drawOval(posx, posy + 110/2, 200, 200 - 110  );
    	g.drawOval(posx, posy + 120/2, 200, 200 - 120  );
    	g.drawOval(posx, posy + 130/2, 200, 200 - 130  );
    	g.drawOval(posx, posy + 140/2, 200, 200 - 140  );
    	g.drawOval(posx, posy + 150/2, 200, 200 - 150  );
    	g.drawOval(posx, posy + 160/2, 200, 200 - 160  );
    	g.drawOval(posx, posy + 170/2, 200, 200 - 170  );
    	g.drawOval(posx, posy + 180/2, 200, 200 - 180  );
    	g.drawOval(posx, posy + 190/2, 200, 200 - 190  );
    	g.drawOval(posx, posy + 100, 200, 0);
        // DRAW INSCRIBED/CIRCUMSCRIBED TRIANGLE
    	int pos1 = 350;
    	int pos2 = 350;
    	
    	g.drawOval(350 , 350 , 200, 200);
    	g.drawLine(pos1 + 100, pos2, pos1 + 100, pos2 + 200);
    	g.drawLine(pos1 + 100, pos2 + 200, pos1 + 200, pos2 + 100);
    	g.drawLine(pos1 + 100, pos2 , pos1 + 200, pos2 + 100);
    	g.drawOval(pos1 + 100, pos2 + 59, 83, 83);


    
    	 // DRAW PACMEN FLOWER
    	posx = 500;
    	posy = 120;
    	
    	g.fillOval(posx, posy, 100, 100);
    	g.fillOval(posx+75, posy, 100, 100);
    	g.fillOval(posx, posy + 75, 100, 100);
    	g.fillOval(posx + 75, posy + 75, 100, 100);
    	
    	g.setColor(Color.WHITE);
    	g.fillRect(posx, posy, 50, 50);
    	g.fillRect(posx + 125, posy, 50, 50);
    	g.fillRect(posx, posy + 125, 50, 50);
    	g.fillRect(posx + 125, posy + 125, 50, 50);
    
    }

	@Override
	public void keyTyped(KeyEvent arg0) {
	
		}
		

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		repaint();
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
	    
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// paint x and y values
		if(arg0.getButton() == MouseEvent.BUTTON1){
			x = arg0.getX();
			y = arg0.getY();
		}
		s = "x: " + x + "y" + y;
		repaint();
		
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
