import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
/*
 * Put Comment here
 * its not agar.io btw
 * The game si very challenging and fun
 * 
 * game is different, but fun and fast paced
 * hard to tell whats food or not
 * 
 * I like how unique the game is. I also like the difficulty level but it is difficult
 * to tell what are the enemies and what are the food. Maybe make enemies one color and food another?
 * 
 * the game is very cahllenging and has a good concept
 * it's hard to tell which one is the player and the enemies and food could move a little smoother
 * 
 * HUGE FLEX -> THIS IS REALLY GOOD -> GOOD JOB
 * 
 * Controls are :
 * R - regens enemies if the timer is greater than 100
 * x- disables mouse
 * e- enables mouse
 * space - halves radius or new game if game over
 */


public class Driver extends JPanel implements ActionListener, KeyListener{
	//size of jframe
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	boolean mouse = true;
	
	int table_width = screenSize.width;
	int table_height = screenSize.height; 	
	int max = 20;
	int radmax = 700;
	
	int radi[]= new int[max];
	int x[]= new int[max];
	int y[]= new int[max];
	int y2 = table_height/2;
	int x2 = table_width/2;
	int radius = (int) (Math.random()*(30)+5);
	int xvelocity = 0;
	int yvelocity = 0;
	int invincibility = 0;
	
	int sx, sy;
	
	double xdistance;
	double ydistance;
	double xplayerv;
	double yplayerv;
	double maxVelocity = 100;
	
	Color[] oldColors = new Color[255];
	Color[] colors = new Color[255];
	Rectangle[] rectangles = new Rectangle[max];
	Rectangle player = new Rectangle(radius, radius, x2, y2);
	String str = "";

	
	// reading a val from a 1d array
	// System.out.print( x[0]); //reading value
	// x[0] = 5; //writing is similar to regular variables but now you have to specify WHERE
	public void eatOthers(){
		for(int i = 0; i < max -1; i++){
			for(int f = 0; f < max-1; f++){
				if(rectangles[i].intersects(x[f], y[f], radi[f], radi[f]) && f != i){
					if(radi[i] > radi[f]){
						radi[f] = 0;
						radi[i] += radi[f];
					}
					else{
						radi[f] += radi[i];
						radi[i] = 0;
					}
				}
			}
		}
	}
	
	
	public void randomGen(){
		for(int i =0; i<max-1; i++){
			if(radius == radmax)
				radi[i] = (int) (Math.random()*(radius + 10) + 10 );
			else if(radius < 200)
				radi[i] = (int) (Math.random()*(50 + radius/3) + 10 );
			else
				radi[i] = (int) (Math.random()*(70+ radius/2)+10 + radius/4);
			x[i] = (int) (Math.random()*(table_width)+5);
			y[i] = (int) (Math.random()*(table_height)+5);
			rectangles[i] = new Rectangle(x[i], y[i], radi[i], radi[i]);
			colors[i] = new Color((int) (Math.random()*(255)), (int) (Math.random()*(255)), (int) (Math.random()*(255)));
			oldColors[i] = colors[i]; 
		}
	}
	public void EnemyCollide(){
		for(int f = 0; f<max-1; f++){
			
			if(y[f] <= 0 ){
				y[f] = table_height;
			}
			if(x[f] <= 0 ){
				x[f] = table_width;
			}
			if(y[f] >= table_height ){
				y[f] = 0;
			}
			if(x[f] >= table_width ){
				x[f] = 0;
			}
		}
	}
	
	
	public void collision() {
		invincibility++;
		for(int f = 0; f < max - 1; f++) {
			if(player.intersects(x[f], y[f], radi[f], radi[f])){
				if(radi[f] > radius && invincibility >= 100){
					radius = 0;
					radi[f] += radius/8;
					str = "Game over";
				}
				else{
					if(radius < radmax)
						radius += radi[f] / 8;
					radi[f] = 0;
				}
			}
		
			if(x2 > table_width)
				x2 = table_width;
			if(x2 < 0 )
				x2 = 0;
			if(y2 > table_height - 50)
				y2 = table_height - 50;
			if(y2 < 0)
				y2 = 0;
		}
	}
	
	public void chaseOthers(){
		for(int i = 0; i < max-1; i++){
			for(int f=0; f < max-1; f++){
				if(radi[i] > radi[f] && x[i] > x[f] - radi[f] - 100 - radi[i] && x[i] < x[f] + 100 + radi[f] + radi[i] && y[i] > y[f] - 100 - radi[f] - radi[i] && y[i] < y[f] + 100 + radi[f] + radi[i] && i != f){
					//colors[i] = Color.GREEN;
					xvelocity = 0;
					yvelocity = 0;
					if(x[i] < x[f]){
						xvelocity += 15/(1+radi[i]/4);
					}if(x[i] > x[f]){
						xvelocity -= 15/(1+radi[i]/4);
					}
					if(y[i] < y[f]){
						yvelocity += 15/(1+radi[i]/4);
					}if(y[i] > y[f]){
						yvelocity -= 15/(1+radi[i]/4);
					}
					if(x[i] < x[f]){
						xvelocity += 15/(1+radi[i]/4);
					}if(x[i] > x[f]){
						xvelocity -= 15/(1+radi[i]/4);
					}
					if(y[i] < y[f]){
						yvelocity += 15/(1+radi[i]/4);
					}if(y[i] > y[f]){
						yvelocity -= 15/(1+radi[i]/4);
					}
					
				}
				else if(radi[i] < radi[f] && x[i] > x[f] - radi[f] - 100 - radi[i] && x[i] < x[f] + 100 + radi[f] + radi[i] && y[i] > y[f] - 100 - radi[f] - radi[i] && y[i] < y[f] + 100 + radi[f] + radi[i] && i != f){
					//colors[i] = Color.RED;
					//xvelocity = (int) -xplayerv + (100*Integer.signum((int) xplayerv))/(1+radi[i]/4);
					//yvelocity = (int) -yplayerv + (100*Integer.signum((int) yplayerv))/(1+radi[i]/4);
					if(x[i] > x[f]){
						xvelocity += 15/(1+radi[i]/4);
					}if(x[i] < x[f]){
						xvelocity -= 15/(1+radi[i]/4);
					}
					if(y[i] > y[f]){
						yvelocity += 15/(1+radi[i]/4);
					}if(y[i] < y[f]){
						yvelocity -= 15/(1+radi[i]/4);
					}if(x[i] > x[f]){
						xvelocity += 15/(1+radi[i]/4);
					}if(x[i] < x[f]){
						xvelocity -= 15/(1+radi[i]/4);
					}
					if(y[i] > y[f]){
						yvelocity += 15/(1+radi[i]/4);
					}if(y[i] < y[f]){
						yvelocity -= 15/(1+radi[i]/4);
					}
				}else{
					colors[i] = oldColors[i];
					yvelocity = (int) (Math.random()*(25) - 10)/(1+radi[i]/10);
					xvelocity = (int) (Math.random()*(25) - 10)/(1+radi[i]/10);
				}
				x[i] += xvelocity;
				y[i] += yvelocity;
			}
		}
	}
	
	public void chasePlayer() {
		for(int f=0; f < max-1; f++) {
		
			if(radi[f] > radius && x[f] > x2 - radius - 100 - radi[f] && x[f] < x2 + 100 + radius + radi[f] && y[f] > y2 - 100 - radius - radi[f] && y[f] < y2 + 100 + radius + radi[f]){
				//colors[f] = Color.GREEN;
				xvelocity = 0;
				yvelocity = 0;
				if(x[f] < x2){
					xvelocity += 50/(1+radi[f]/10);
				}else if(x[f] > x2){
					xvelocity -= 50/(1+radi[f]/10);
				}
				if(y[f] < y2){
					yvelocity += 50/(1+radi[f]/10);
				}if(y[f] > y2){
					yvelocity -= 50/(1+radi[f]/10);
				}
				
			}
			else if(radi[f] < radius && x[f] > x2 - radius - 100 && x[f] < x2 + 100 + radius && y[f] > y2 - 100 - radius && y[f] < y2 + 100 + radius){
				//colors[f] = Color.RED;
				//xvelocity = (int) -xplayerv + (100*Integer.signum((int) xplayerv))/(1+radi[f]/10);
				//yvelocity = (int) -yplayerv + (100*Integer.signum((int) yplayerv))/(1+radi[f]/10);
				if(x[f] > x2){
					xvelocity += 50/(1+radi[f]/10);
				}else if(x[f] < x2){
					xvelocity -= 50/(1+radi[f]/10);
				}
				if(y[f] > y2){
					yvelocity += 50/(1+radi[f]/10);
				}if(y[f] < y2){
					yvelocity -= 50/(1+radi[f]/10);
				}
			}else{
				colors[f] = oldColors[f];
				yvelocity = (int) (Math.random()*(70) - 10)/(1+radi[f]/10);
				xvelocity = (int) (Math.random()*(70) - 10)/(1+radi[f]/10);
			}
			x[f] += xvelocity;
			y[f] += yvelocity;
		}
	}
	
	
	public void paint(Graphics g) {
		super.paintComponent(g);
		g.setColor(Color.RED);
		g.drawString(""+ radius, table_width - 100, 100);
		g.drawString("" + invincibility, table_width - 200, 100);
		g.setColor(Color.BLACK);
		g.fillOval(x2 - radius/2, y2 - radius/2, radius, radius);
		player = new Rectangle(x2, y2, radius, radius);
		for(int i = 0; i < max -1; i++){
			g.setColor(colors[i]);
			g.fillOval(x[i], y[i], radi[i], radi[i] );
			rectangles[i] = new Rectangle(x[i], y[i], radi[i], radi[i]);
		}
		g.setColor(Color.red);
		g.drawString(str, sx, sy);
		
		
	}//end of paint method - put code above for anything dealing with drawing -
	
	
	
	Font font = new Font ("Courier New", 1, 50);
	public void update() {
		/*if(radius >= 500){
			try{
				for(int i = 0; i<max-1; i++){
					radi[i] /= 2;
				}
				radius /= 2;
			}
			catch(Exception e){
				System.out.println(e.printstacktrace)
			}
		}
		*/

		chasePlayer();
		collision();
		chaseOthers();
		eatOthers();
		EnemyCollide();
		
		
		if(radius > radmax){
			radius = radmax;
		}
		
		Point p = MouseInfo.getPointerInfo().getLocation();
		if(mouse == true){	
			sx = p.x;
			sy = p.y;		
			
			xdistance = p.x - x2;
			ydistance = p.y - y2;
			xplayerv = ((xdistance/2)/(1+radius/10));
			yplayerv = ((ydistance/2)/(1+radius/10));
			if(xplayerv > 100){
				x2 += maxVelocity;
			}else{
				x2 += xplayerv;
			}if(yplayerv > 100){
				y2 += maxVelocity;
			}else{
				y2 += yplayerv;
			}
		}else{
			x2 += xplayerv;
			y2 += yplayerv;
		}

		
		
		
	}//end of update method - put code above for any updates on variable
		
	
	//==================code above ===========================
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		update();
		repaint();
	}
	
	public static void main(String[] arg) {
		Driver d = new Driver();
	}
	

	public Driver(){
		JFrame f = new JFrame();
		f.setTitle("Arrays");
		f.setSize(table_width, table_height);
		f.setBackground(Color.BLACK);
		f.setResizable(false);
		f.addKeyListener(this);
		f.add(this);
		
		randomGen();
		
		t = new Timer(17,this);
		t.start();
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setVisible(true);
	}
	Timer t;

	@Override
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		System.out.println("key:" + key);
		switch(key){
		case 32:
			if(radius != 0){
				radius /= 2;
				break;
			}else{
				randomGen();
				str = "";
				radius = (int) (Math.random()*(30)+5);
				x2 = table_width/2;
				y2 = table_height/2;
				invincibility = 0;
				break;
			}
		case 88:
			mouse = false;
			break;
		case 69:
			mouse = true;
			break;
		case 82:
			if(invincibility >= 100){
				invincibility = 0;
				randomGen();
			}
		}
		
		if(mouse == false){
			switch(key){
			case 38:
				yplayerv += -((70/2)/(1+radius/10));
				break;
			case 40:
				yplayerv += ((70/2)/(1+radius/10));
				break;
			case 37:
				xplayerv += -((70/2)/(1+radius/10));
				break;
			case 39:
				xplayerv += ((70/2)/(1+radius/10));
				break;
			case 87:
				yplayerv += -((70/2)/(1+radius/10));
				break;
			case 83:
				yplayerv += ((70/2)/(1+radius/10));
				break;
			case 65:
				xplayerv += -((70/2)/(1+radius/10));
				break;
			case 68:
				xplayerv += ((70/2)/(1+radius/10));	
			}
		}
		//randomGen();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		System.out.println("key:" + key);
		switch(key){
		case 38:
			yplayerv = 0;
			break;
		case 40:
			yplayerv = 0;
			break;
		case 37:
			xplayerv = 0;
			break;
		case 39:
			xplayerv = 0;
			break;
		case 87:
			yplayerv = 0;
			break;
		case 83:
			yplayerv = 0;
			break;
		case 65:
			xplayerv = 0;
			break;
		case 68:
			xplayerv = 0;	
		}
		
	}

	@Override
	public void keyTyped(KeyEvent e) {

	}
}
